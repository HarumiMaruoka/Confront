//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Game/OutGame/Input Module/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Game/OutGame/Input Module/Player Input.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""In Game Input"",
            ""id"": ""98fc6ec5-4475-466b-9bf9-b603450d3572"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6143e401-a570-4c0e-a73b-22edad3750e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ab144700-f14a-45bb-96a2-b5f7899623e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Value"",
                    ""id"": ""ce01d9e6-244d-49b5-9331-03bf6555f91b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AttackX"",
                    ""type"": ""Button"",
                    ""id"": ""cfe65c01-38ea-4a26-95ed-90a0d1b753f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackY"",
                    ""type"": ""Button"",
                    ""id"": ""ec7ecca6-137f-4cc1-adf7-a3707bc13a33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""07ddf093-d77e-498d-a7af-3af09013482a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""59afd986-b5c6-4724-961b-ed335038b367"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD [Keyboard]"",
                    ""id"": ""6cbdfb1f-1c27-4bf5-aef9-29ad1f163f9d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""64c934e6-7539-421e-98eb-22c2d4394f59"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f731d5e0-6f3b-41a8-8f88-26065ebf4e47"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dd5e29c9-0a4c-492b-8442-e975c5508076"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9f5bb02d-37cd-4b3a-9510-a2aadb609fab"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""64e5b721-06d0-48b8-a8a5-bf5d6060154a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc507c0a-8417-4880-b058-3dcc20bc85e6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad2d228c-5989-4fb6-8e2c-da443b98a5eb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9d60ba2-8303-4dc1-b48b-0b461590c57d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54ba6f2b-ce2d-4258-acfb-6656f4890470"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f761b31f-a065-4a0d-b02d-e219dc26dfa0"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6190541d-26a7-41ce-9701-d8b715e8dba8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf5c8774-d5b7-48c4-aac9-19f921c1e0f1"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea0e6032-2677-4870-be54-527e222188b9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad60052a-895d-470b-b1c3-e05d29e2361c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41a23072-9a5b-4745-87f7-6b8f31e80f89"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b357ba54-b2a7-4d14-9c4c-77cdfb4e51c6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ddde74f-a445-47b2-b86d-3ffc38f8a73e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Out Game Input"",
            ""id"": ""e1b1694e-9a86-492e-95ee-4ea0c9cb2355"",
            ""actions"": [
                {
                    ""name"": ""OpenMenu"",
                    ""type"": ""Button"",
                    ""id"": ""43583167-4a68-4d13-97ef-2e19f8edd624"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""c68a9c72-2154-4304-9622-a7b6c3198e78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SaveShortcut"",
                    ""type"": ""Button"",
                    ""id"": ""7ed19880-d1f8-4e2f-9b42-15704342f9a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""ae8c3f19-90ff-4c50-bbf7-ab6f3ae75254"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Click"",
                    ""type"": ""Button"",
                    ""id"": ""31ed8a00-d9da-43e0-98f3-a4ee16c826e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar Top"",
                    ""type"": ""Button"",
                    ""id"": ""3aaf471e-a5c7-449f-b5ef-3280e50f6e05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar Bottom"",
                    ""type"": ""Button"",
                    ""id"": ""abab81fd-6d9d-4bca-a2c7-aaeb5dc8e184"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar Left"",
                    ""type"": ""Button"",
                    ""id"": ""143dd372-d7a7-4055-84cc-b6998f98d4a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar Right"",
                    ""type"": ""Button"",
                    ""id"": ""1bab9a40-0542-488d-93a3-81951b59b41e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e415de5-10a5-4bb7-8172-5dee6aa912ac"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15be2db3-9443-4b57-8dba-cc8b0c90e8c7"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""281b9feb-1311-49c2-87e6-2ba1941d4194"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1deeced0-1c64-44b5-9b6a-c2672d19928e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""490fdb89-ce4a-4754-8dcc-84f4742e37fc"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SaveShortcut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3307ea8b-12a0-499b-bbcd-e64b62915f2e"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SaveShortcut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eef9c3b8-52f1-40e7-95da-70bf226a8a98"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""522f8fb1-0780-4c29-84cc-eeb768056b2f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4530c4d3-7e2e-4eb2-8c98-2f049ebded45"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Top"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""f5d0084f-baff-4381-b51d-91c95fc252a8"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Top"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""3c1889f3-6b0b-47d1-a07e-63520927ff59"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Top"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""f963c7ac-fb46-43c0-9447-b036a43c9d14"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Top"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d3f6a0bd-820c-4aaa-b8a7-036ad1bd5180"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Bottom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""91bce4b4-fe9e-47bc-9c99-45c24fdd5af4"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Bottom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""29802260-6cbb-45ea-9cad-691b2813fcdd"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Bottom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""4dbeb562-76ba-4bb6-93e1-2392661555c4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Bottom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""30d6c116-0d3e-4493-9152-449311e9cec5"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""9d35d46b-66cf-44ed-b091-efb600f03fd0"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Left"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""656daf2b-397f-43b1-a19c-41cdbd092760"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""3aa8d4fc-c8e0-41fa-80f7-d1a063b7dcf6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c39315dc-1d74-4770-8e79-1f8d8957a891"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""6e650fe0-3a87-4166-aa81-e03203be9699"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Right"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""1778ec82-3fc1-4217-a872-29deeddf4678"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""1df3dd29-d11b-424d-8923-b18e63a18015"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""17cb9a05-4d3f-45a0-9323-11e1cc9d8ae8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eea37d3f-142f-4b55-b2c6-7129819ff027"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // In Game Input
        m_InGameInput = asset.FindActionMap("In Game Input", throwIfNotFound: true);
        m_InGameInput_Movement = m_InGameInput.FindAction("Movement", throwIfNotFound: true);
        m_InGameInput_Jump = m_InGameInput.FindAction("Jump", throwIfNotFound: true);
        m_InGameInput_Dash = m_InGameInput.FindAction("Dash", throwIfNotFound: true);
        m_InGameInput_AttackX = m_InGameInput.FindAction("AttackX", throwIfNotFound: true);
        m_InGameInput_AttackY = m_InGameInput.FindAction("AttackY", throwIfNotFound: true);
        m_InGameInput_Dodge = m_InGameInput.FindAction("Dodge", throwIfNotFound: true);
        m_InGameInput_Interact = m_InGameInput.FindAction("Interact", throwIfNotFound: true);
        // Out Game Input
        m_OutGameInput = asset.FindActionMap("Out Game Input", throwIfNotFound: true);
        m_OutGameInput_OpenMenu = m_OutGameInput.FindAction("OpenMenu", throwIfNotFound: true);
        m_OutGameInput_CloseMenu = m_OutGameInput.FindAction("CloseMenu", throwIfNotFound: true);
        m_OutGameInput_SaveShortcut = m_OutGameInput.FindAction("SaveShortcut", throwIfNotFound: true);
        m_OutGameInput_Click = m_OutGameInput.FindAction("Click", throwIfNotFound: true);
        m_OutGameInput_RightClick = m_OutGameInput.FindAction("Right Click", throwIfNotFound: true);
        m_OutGameInput_HotBarTop = m_OutGameInput.FindAction("HotBar Top", throwIfNotFound: true);
        m_OutGameInput_HotBarBottom = m_OutGameInput.FindAction("HotBar Bottom", throwIfNotFound: true);
        m_OutGameInput_HotBarLeft = m_OutGameInput.FindAction("HotBar Left", throwIfNotFound: true);
        m_OutGameInput_HotBarRight = m_OutGameInput.FindAction("HotBar Right", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_InGameInput.enabled, "This will cause a leak and performance issues, PlayerInput.InGameInput.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_OutGameInput.enabled, "This will cause a leak and performance issues, PlayerInput.OutGameInput.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // In Game Input
    private readonly InputActionMap m_InGameInput;
    private List<IInGameInputActions> m_InGameInputActionsCallbackInterfaces = new List<IInGameInputActions>();
    private readonly InputAction m_InGameInput_Movement;
    private readonly InputAction m_InGameInput_Jump;
    private readonly InputAction m_InGameInput_Dash;
    private readonly InputAction m_InGameInput_AttackX;
    private readonly InputAction m_InGameInput_AttackY;
    private readonly InputAction m_InGameInput_Dodge;
    private readonly InputAction m_InGameInput_Interact;
    /// <summary>
    /// Provides access to input actions defined in input action map "In Game Input".
    /// </summary>
    public struct InGameInputActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public InGameInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "InGameInput/Movement".
        /// </summary>
        public InputAction @Movement => m_Wrapper.m_InGameInput_Movement;
        /// <summary>
        /// Provides access to the underlying input action "InGameInput/Jump".
        /// </summary>
        public InputAction @Jump => m_Wrapper.m_InGameInput_Jump;
        /// <summary>
        /// Provides access to the underlying input action "InGameInput/Dash".
        /// </summary>
        public InputAction @Dash => m_Wrapper.m_InGameInput_Dash;
        /// <summary>
        /// Provides access to the underlying input action "InGameInput/AttackX".
        /// </summary>
        public InputAction @AttackX => m_Wrapper.m_InGameInput_AttackX;
        /// <summary>
        /// Provides access to the underlying input action "InGameInput/AttackY".
        /// </summary>
        public InputAction @AttackY => m_Wrapper.m_InGameInput_AttackY;
        /// <summary>
        /// Provides access to the underlying input action "InGameInput/Dodge".
        /// </summary>
        public InputAction @Dodge => m_Wrapper.m_InGameInput_Dodge;
        /// <summary>
        /// Provides access to the underlying input action "InGameInput/Interact".
        /// </summary>
        public InputAction @Interact => m_Wrapper.m_InGameInput_Interact;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_InGameInput; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="InGameInputActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(InGameInputActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="InGameInputActions" />
        public void AddCallbacks(IInGameInputActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameInputActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @AttackX.started += instance.OnAttackX;
            @AttackX.performed += instance.OnAttackX;
            @AttackX.canceled += instance.OnAttackX;
            @AttackY.started += instance.OnAttackY;
            @AttackY.performed += instance.OnAttackY;
            @AttackY.canceled += instance.OnAttackY;
            @Dodge.started += instance.OnDodge;
            @Dodge.performed += instance.OnDodge;
            @Dodge.canceled += instance.OnDodge;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="InGameInputActions" />
        private void UnregisterCallbacks(IInGameInputActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @AttackX.started -= instance.OnAttackX;
            @AttackX.performed -= instance.OnAttackX;
            @AttackX.canceled -= instance.OnAttackX;
            @AttackY.started -= instance.OnAttackY;
            @AttackY.performed -= instance.OnAttackY;
            @AttackY.canceled -= instance.OnAttackY;
            @Dodge.started -= instance.OnDodge;
            @Dodge.performed -= instance.OnDodge;
            @Dodge.canceled -= instance.OnDodge;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InGameInputActions.UnregisterCallbacks(IInGameInputActions)" />.
        /// </summary>
        /// <seealso cref="InGameInputActions.UnregisterCallbacks(IInGameInputActions)" />
        public void RemoveCallbacks(IInGameInputActions instance)
        {
            if (m_Wrapper.m_InGameInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="InGameInputActions.AddCallbacks(IInGameInputActions)" />
        /// <seealso cref="InGameInputActions.RemoveCallbacks(IInGameInputActions)" />
        /// <seealso cref="InGameInputActions.UnregisterCallbacks(IInGameInputActions)" />
        public void SetCallbacks(IInGameInputActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="InGameInputActions" /> instance referencing this action map.
    /// </summary>
    public InGameInputActions @InGameInput => new InGameInputActions(this);

    // Out Game Input
    private readonly InputActionMap m_OutGameInput;
    private List<IOutGameInputActions> m_OutGameInputActionsCallbackInterfaces = new List<IOutGameInputActions>();
    private readonly InputAction m_OutGameInput_OpenMenu;
    private readonly InputAction m_OutGameInput_CloseMenu;
    private readonly InputAction m_OutGameInput_SaveShortcut;
    private readonly InputAction m_OutGameInput_Click;
    private readonly InputAction m_OutGameInput_RightClick;
    private readonly InputAction m_OutGameInput_HotBarTop;
    private readonly InputAction m_OutGameInput_HotBarBottom;
    private readonly InputAction m_OutGameInput_HotBarLeft;
    private readonly InputAction m_OutGameInput_HotBarRight;
    /// <summary>
    /// Provides access to input actions defined in input action map "Out Game Input".
    /// </summary>
    public struct OutGameInputActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public OutGameInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "OutGameInput/OpenMenu".
        /// </summary>
        public InputAction @OpenMenu => m_Wrapper.m_OutGameInput_OpenMenu;
        /// <summary>
        /// Provides access to the underlying input action "OutGameInput/CloseMenu".
        /// </summary>
        public InputAction @CloseMenu => m_Wrapper.m_OutGameInput_CloseMenu;
        /// <summary>
        /// Provides access to the underlying input action "OutGameInput/SaveShortcut".
        /// </summary>
        public InputAction @SaveShortcut => m_Wrapper.m_OutGameInput_SaveShortcut;
        /// <summary>
        /// Provides access to the underlying input action "OutGameInput/Click".
        /// </summary>
        public InputAction @Click => m_Wrapper.m_OutGameInput_Click;
        /// <summary>
        /// Provides access to the underlying input action "OutGameInput/RightClick".
        /// </summary>
        public InputAction @RightClick => m_Wrapper.m_OutGameInput_RightClick;
        /// <summary>
        /// Provides access to the underlying input action "OutGameInput/HotBarTop".
        /// </summary>
        public InputAction @HotBarTop => m_Wrapper.m_OutGameInput_HotBarTop;
        /// <summary>
        /// Provides access to the underlying input action "OutGameInput/HotBarBottom".
        /// </summary>
        public InputAction @HotBarBottom => m_Wrapper.m_OutGameInput_HotBarBottom;
        /// <summary>
        /// Provides access to the underlying input action "OutGameInput/HotBarLeft".
        /// </summary>
        public InputAction @HotBarLeft => m_Wrapper.m_OutGameInput_HotBarLeft;
        /// <summary>
        /// Provides access to the underlying input action "OutGameInput/HotBarRight".
        /// </summary>
        public InputAction @HotBarRight => m_Wrapper.m_OutGameInput_HotBarRight;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_OutGameInput; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="OutGameInputActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(OutGameInputActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="OutGameInputActions" />
        public void AddCallbacks(IOutGameInputActions instance)
        {
            if (instance == null || m_Wrapper.m_OutGameInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OutGameInputActionsCallbackInterfaces.Add(instance);
            @OpenMenu.started += instance.OnOpenMenu;
            @OpenMenu.performed += instance.OnOpenMenu;
            @OpenMenu.canceled += instance.OnOpenMenu;
            @CloseMenu.started += instance.OnCloseMenu;
            @CloseMenu.performed += instance.OnCloseMenu;
            @CloseMenu.canceled += instance.OnCloseMenu;
            @SaveShortcut.started += instance.OnSaveShortcut;
            @SaveShortcut.performed += instance.OnSaveShortcut;
            @SaveShortcut.canceled += instance.OnSaveShortcut;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @HotBarTop.started += instance.OnHotBarTop;
            @HotBarTop.performed += instance.OnHotBarTop;
            @HotBarTop.canceled += instance.OnHotBarTop;
            @HotBarBottom.started += instance.OnHotBarBottom;
            @HotBarBottom.performed += instance.OnHotBarBottom;
            @HotBarBottom.canceled += instance.OnHotBarBottom;
            @HotBarLeft.started += instance.OnHotBarLeft;
            @HotBarLeft.performed += instance.OnHotBarLeft;
            @HotBarLeft.canceled += instance.OnHotBarLeft;
            @HotBarRight.started += instance.OnHotBarRight;
            @HotBarRight.performed += instance.OnHotBarRight;
            @HotBarRight.canceled += instance.OnHotBarRight;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="OutGameInputActions" />
        private void UnregisterCallbacks(IOutGameInputActions instance)
        {
            @OpenMenu.started -= instance.OnOpenMenu;
            @OpenMenu.performed -= instance.OnOpenMenu;
            @OpenMenu.canceled -= instance.OnOpenMenu;
            @CloseMenu.started -= instance.OnCloseMenu;
            @CloseMenu.performed -= instance.OnCloseMenu;
            @CloseMenu.canceled -= instance.OnCloseMenu;
            @SaveShortcut.started -= instance.OnSaveShortcut;
            @SaveShortcut.performed -= instance.OnSaveShortcut;
            @SaveShortcut.canceled -= instance.OnSaveShortcut;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @HotBarTop.started -= instance.OnHotBarTop;
            @HotBarTop.performed -= instance.OnHotBarTop;
            @HotBarTop.canceled -= instance.OnHotBarTop;
            @HotBarBottom.started -= instance.OnHotBarBottom;
            @HotBarBottom.performed -= instance.OnHotBarBottom;
            @HotBarBottom.canceled -= instance.OnHotBarBottom;
            @HotBarLeft.started -= instance.OnHotBarLeft;
            @HotBarLeft.performed -= instance.OnHotBarLeft;
            @HotBarLeft.canceled -= instance.OnHotBarLeft;
            @HotBarRight.started -= instance.OnHotBarRight;
            @HotBarRight.performed -= instance.OnHotBarRight;
            @HotBarRight.canceled -= instance.OnHotBarRight;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="OutGameInputActions.UnregisterCallbacks(IOutGameInputActions)" />.
        /// </summary>
        /// <seealso cref="OutGameInputActions.UnregisterCallbacks(IOutGameInputActions)" />
        public void RemoveCallbacks(IOutGameInputActions instance)
        {
            if (m_Wrapper.m_OutGameInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="OutGameInputActions.AddCallbacks(IOutGameInputActions)" />
        /// <seealso cref="OutGameInputActions.RemoveCallbacks(IOutGameInputActions)" />
        /// <seealso cref="OutGameInputActions.UnregisterCallbacks(IOutGameInputActions)" />
        public void SetCallbacks(IOutGameInputActions instance)
        {
            foreach (var item in m_Wrapper.m_OutGameInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OutGameInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="OutGameInputActions" /> instance referencing this action map.
    /// </summary>
    public OutGameInputActions @OutGameInput => new OutGameInputActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "In Game Input" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="InGameInputActions.AddCallbacks(IInGameInputActions)" />
    /// <seealso cref="InGameInputActions.RemoveCallbacks(IInGameInputActions)" />
    public interface IInGameInputActions
    {
        /// <summary>
        /// Method invoked when associated input action "Movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJump(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Dash" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDash(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AttackX" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAttackX(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AttackY" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAttackY(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Dodge" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDodge(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Interact" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteract(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Out Game Input" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="OutGameInputActions.AddCallbacks(IOutGameInputActions)" />
    /// <seealso cref="OutGameInputActions.RemoveCallbacks(IOutGameInputActions)" />
    public interface IOutGameInputActions
    {
        /// <summary>
        /// Method invoked when associated input action "OpenMenu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOpenMenu(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CloseMenu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCloseMenu(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SaveShortcut" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSaveShortcut(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Right Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "HotBar Top" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHotBarTop(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "HotBar Bottom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHotBarBottom(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "HotBar Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHotBarLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "HotBar Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHotBarRight(InputAction.CallbackContext context);
    }
}
