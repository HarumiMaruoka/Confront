//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/OutGame/Input Module/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""In Game Input"",
            ""id"": ""98fc6ec5-4475-466b-9bf9-b603450d3572"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6143e401-a570-4c0e-a73b-22edad3750e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ab144700-f14a-45bb-96a2-b5f7899623e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Value"",
                    ""id"": ""ce01d9e6-244d-49b5-9331-03bf6555f91b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AttackX"",
                    ""type"": ""Button"",
                    ""id"": ""cfe65c01-38ea-4a26-95ed-90a0d1b753f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackY"",
                    ""type"": ""Button"",
                    ""id"": ""ec7ecca6-137f-4cc1-adf7-a3707bc13a33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""07ddf093-d77e-498d-a7af-3af09013482a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD [Keyboard]"",
                    ""id"": ""6cbdfb1f-1c27-4bf5-aef9-29ad1f163f9d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""64c934e6-7539-421e-98eb-22c2d4394f59"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f731d5e0-6f3b-41a8-8f88-26065ebf4e47"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dd5e29c9-0a4c-492b-8442-e975c5508076"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9f5bb02d-37cd-4b3a-9510-a2aadb609fab"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""64e5b721-06d0-48b8-a8a5-bf5d6060154a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""859059f3-9320-4aeb-85e9-5e07b5a39c75"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc507c0a-8417-4880-b058-3dcc20bc85e6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad2d228c-5989-4fb6-8e2c-da443b98a5eb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9d60ba2-8303-4dc1-b48b-0b461590c57d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54ba6f2b-ce2d-4258-acfb-6656f4890470"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f761b31f-a065-4a0d-b02d-e219dc26dfa0"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6190541d-26a7-41ce-9701-d8b715e8dba8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf5c8774-d5b7-48c4-aac9-19f921c1e0f1"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea0e6032-2677-4870-be54-527e222188b9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad60052a-895d-470b-b1c3-e05d29e2361c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41a23072-9a5b-4745-87f7-6b8f31e80f89"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Out Game Input"",
            ""id"": ""e1b1694e-9a86-492e-95ee-4ea0c9cb2355"",
            ""actions"": [
                {
                    ""name"": ""OpenMenu"",
                    ""type"": ""Button"",
                    ""id"": ""43583167-4a68-4d13-97ef-2e19f8edd624"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""c68a9c72-2154-4304-9622-a7b6c3198e78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SaveShortcut"",
                    ""type"": ""Button"",
                    ""id"": ""7ed19880-d1f8-4e2f-9b42-15704342f9a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e415de5-10a5-4bb7-8172-5dee6aa912ac"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15be2db3-9443-4b57-8dba-cc8b0c90e8c7"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""281b9feb-1311-49c2-87e6-2ba1941d4194"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1deeced0-1c64-44b5-9b6a-c2672d19928e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""490fdb89-ce4a-4754-8dcc-84f4742e37fc"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SaveShortcut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3307ea8b-12a0-499b-bbcd-e64b62915f2e"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SaveShortcut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // In Game Input
        m_InGameInput = asset.FindActionMap("In Game Input", throwIfNotFound: true);
        m_InGameInput_Movement = m_InGameInput.FindAction("Movement", throwIfNotFound: true);
        m_InGameInput_Jump = m_InGameInput.FindAction("Jump", throwIfNotFound: true);
        m_InGameInput_Dash = m_InGameInput.FindAction("Dash", throwIfNotFound: true);
        m_InGameInput_AttackX = m_InGameInput.FindAction("AttackX", throwIfNotFound: true);
        m_InGameInput_AttackY = m_InGameInput.FindAction("AttackY", throwIfNotFound: true);
        m_InGameInput_Dodge = m_InGameInput.FindAction("Dodge", throwIfNotFound: true);
        // Out Game Input
        m_OutGameInput = asset.FindActionMap("Out Game Input", throwIfNotFound: true);
        m_OutGameInput_OpenMenu = m_OutGameInput.FindAction("OpenMenu", throwIfNotFound: true);
        m_OutGameInput_CloseMenu = m_OutGameInput.FindAction("CloseMenu", throwIfNotFound: true);
        m_OutGameInput_SaveShortcut = m_OutGameInput.FindAction("SaveShortcut", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // In Game Input
    private readonly InputActionMap m_InGameInput;
    private List<IInGameInputActions> m_InGameInputActionsCallbackInterfaces = new List<IInGameInputActions>();
    private readonly InputAction m_InGameInput_Movement;
    private readonly InputAction m_InGameInput_Jump;
    private readonly InputAction m_InGameInput_Dash;
    private readonly InputAction m_InGameInput_AttackX;
    private readonly InputAction m_InGameInput_AttackY;
    private readonly InputAction m_InGameInput_Dodge;
    public struct InGameInputActions
    {
        private @PlayerInput m_Wrapper;
        public InGameInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InGameInput_Movement;
        public InputAction @Jump => m_Wrapper.m_InGameInput_Jump;
        public InputAction @Dash => m_Wrapper.m_InGameInput_Dash;
        public InputAction @AttackX => m_Wrapper.m_InGameInput_AttackX;
        public InputAction @AttackY => m_Wrapper.m_InGameInput_AttackY;
        public InputAction @Dodge => m_Wrapper.m_InGameInput_Dodge;
        public InputActionMap Get() { return m_Wrapper.m_InGameInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameInputActions set) { return set.Get(); }
        public void AddCallbacks(IInGameInputActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameInputActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @AttackX.started += instance.OnAttackX;
            @AttackX.performed += instance.OnAttackX;
            @AttackX.canceled += instance.OnAttackX;
            @AttackY.started += instance.OnAttackY;
            @AttackY.performed += instance.OnAttackY;
            @AttackY.canceled += instance.OnAttackY;
            @Dodge.started += instance.OnDodge;
            @Dodge.performed += instance.OnDodge;
            @Dodge.canceled += instance.OnDodge;
        }

        private void UnregisterCallbacks(IInGameInputActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @AttackX.started -= instance.OnAttackX;
            @AttackX.performed -= instance.OnAttackX;
            @AttackX.canceled -= instance.OnAttackX;
            @AttackY.started -= instance.OnAttackY;
            @AttackY.performed -= instance.OnAttackY;
            @AttackY.canceled -= instance.OnAttackY;
            @Dodge.started -= instance.OnDodge;
            @Dodge.performed -= instance.OnDodge;
            @Dodge.canceled -= instance.OnDodge;
        }

        public void RemoveCallbacks(IInGameInputActions instance)
        {
            if (m_Wrapper.m_InGameInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInGameInputActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InGameInputActions @InGameInput => new InGameInputActions(this);

    // Out Game Input
    private readonly InputActionMap m_OutGameInput;
    private List<IOutGameInputActions> m_OutGameInputActionsCallbackInterfaces = new List<IOutGameInputActions>();
    private readonly InputAction m_OutGameInput_OpenMenu;
    private readonly InputAction m_OutGameInput_CloseMenu;
    private readonly InputAction m_OutGameInput_SaveShortcut;
    public struct OutGameInputActions
    {
        private @PlayerInput m_Wrapper;
        public OutGameInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenMenu => m_Wrapper.m_OutGameInput_OpenMenu;
        public InputAction @CloseMenu => m_Wrapper.m_OutGameInput_CloseMenu;
        public InputAction @SaveShortcut => m_Wrapper.m_OutGameInput_SaveShortcut;
        public InputActionMap Get() { return m_Wrapper.m_OutGameInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OutGameInputActions set) { return set.Get(); }
        public void AddCallbacks(IOutGameInputActions instance)
        {
            if (instance == null || m_Wrapper.m_OutGameInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OutGameInputActionsCallbackInterfaces.Add(instance);
            @OpenMenu.started += instance.OnOpenMenu;
            @OpenMenu.performed += instance.OnOpenMenu;
            @OpenMenu.canceled += instance.OnOpenMenu;
            @CloseMenu.started += instance.OnCloseMenu;
            @CloseMenu.performed += instance.OnCloseMenu;
            @CloseMenu.canceled += instance.OnCloseMenu;
            @SaveShortcut.started += instance.OnSaveShortcut;
            @SaveShortcut.performed += instance.OnSaveShortcut;
            @SaveShortcut.canceled += instance.OnSaveShortcut;
        }

        private void UnregisterCallbacks(IOutGameInputActions instance)
        {
            @OpenMenu.started -= instance.OnOpenMenu;
            @OpenMenu.performed -= instance.OnOpenMenu;
            @OpenMenu.canceled -= instance.OnOpenMenu;
            @CloseMenu.started -= instance.OnCloseMenu;
            @CloseMenu.performed -= instance.OnCloseMenu;
            @CloseMenu.canceled -= instance.OnCloseMenu;
            @SaveShortcut.started -= instance.OnSaveShortcut;
            @SaveShortcut.performed -= instance.OnSaveShortcut;
            @SaveShortcut.canceled -= instance.OnSaveShortcut;
        }

        public void RemoveCallbacks(IOutGameInputActions instance)
        {
            if (m_Wrapper.m_OutGameInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOutGameInputActions instance)
        {
            foreach (var item in m_Wrapper.m_OutGameInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OutGameInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OutGameInputActions @OutGameInput => new OutGameInputActions(this);
    public interface IInGameInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAttackX(InputAction.CallbackContext context);
        void OnAttackY(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
    }
    public interface IOutGameInputActions
    {
        void OnOpenMenu(InputAction.CallbackContext context);
        void OnCloseMenu(InputAction.CallbackContext context);
        void OnSaveShortcut(InputAction.CallbackContext context);
    }
}
